openapi: 3.0.0
info:
  version: 1.0.0
  title: mycroft test
servers:
  - url: http://localhost:5000/v1
schemes:
  - http
tags:
- name: "login"
  description: "로그인 관련"
- name: "search"
  description: "조회 관련"
- name: "booking"
  description: "예약 관련"
paths:
  /ticketing:
    post:
      tags:
      - booking
      summary: 티켓 구매
      description: "티켓 구매"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                screen: 
                  type: string
                seat: 
                  type: string
                price: 
                  type: string
              required:
              - screen
              - seat
              - price
      responses:
        '200':
          description: "successful operation"
        '409':
          description: "이미 확정된 예약"
        '422':
          description: "금액 미 일치."
        '401':
          description: "unauthorized."
        '204':
          description: "no content."
      security:
      - api_key: []
  /login:
    post:
      tags:
      - login
      summary: 로그인
      description: "jwt 쿠키로 반환"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id: 
                  type: string
                password: 
                  type: string
              required:
              - id
              - password
      responses:
        '200':
          description: "successful operation"
        '401':
          description: "unauthorized."
        '204':
          description: "no content."
      security:
      - api_key: []
  /movie:
    get:
      tags:
      - search
      summary: 전체 영화 리스트 조회
      description: "모든 영화의 리스트를 조회하여 array로 리턴"
      parameters: 
      - in: cookie
        name: access_token
        schema:
          type: string
      responses:
        '200':
          description: "successful operation"
          content: 
            application/json:
              schema:
                items: 
                  type: array
                  $ref: "#/definitions/Movie"
        '401':
          description: "unauthorized."
        '204':
          description: "no content."
      security:
      - api_key: []
  /screen:
    get:
      tags:
      - search
      summary: 영화별 상영관 조회
      description: "같은 영화를 다른 상영관에서 상영, 이에 대한 조회"
      parameters: 
      - in: cookie
        name: access_token
        schema:
          type: string
      responses:
        '200':
          description: "successful operation"
          content: 
            application/json:
              schema:
                items: 
                  type: array
                  $ref: "#/definitions/Screen"
        '401':
          description: "unauthorized."
        '204':
          description: "no content."
      security:
      - api_key: []
  /seat:
    get:
      tags:
      - search
      summary: 상영관 좌석 조회
      description: "특정 상영관에 대한 모든 좌석 조회"
      parameters: 
      - in: cookie
        name: access_token
        schema:
          type: string
      - in: query
        name: screen
        required: true
        schema:
          type: string
      responses:
        '200':
          description: "successful operation"
          content: 
            application/json:
              schema:
                items: 
                  type: array
                  $ref: "#/definitions/Seat"
        '400':
          description: "bad request"
        '401':
          description: "unauthorized."
        '204':
          description: "no content."
      security:
      - api_key: []
  /prefer-seat:
    post:
      tags:
      - search
      summary: 선호하는 좌석 중 예매 가능 좌석 조회
      description: "선호 좌석을 전달하여 예매 가능 좌석만 리턴"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                prefer_seat:
                  type: array
                  items:
                    type: string
            encoding:
              prefer_seat:
                style: form
                explode: false
      responses:
        '200':
          description: "successful operation"
          content: 
            application/json:
              schema:
                items: 
                  type: array
                  $ref: "#/definitions/Seat"
        '400':
          description: "bad request"
        '401':
          description: "unauthorized."
        '204':
          description: "no content."
      security:
      - api_key: []
  /ticket-info:
    get:
      tags:
      - search
      summary: 티켓조회
      description: "티켓 번호를 통하여 티켓 조회"
      parameters: 
      - in: query
        name: ticket
        schema:
          type: integer
      responses:
        '200':
          description: "successful operation"
          content: 
            application/json:
              schema:
                items: 
                  type: array
                  $ref: "#/definitions/Seat"
        '400':
          description: "bad request"
        '204':
          description: "no content."
      security:
      - api_key: []
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: access_token
      in: cookie
definitions:
  Movie:
    type: object
    properties:
      no:
        type: integer
        example: 1
      title:
        type: string
        example: 영화1
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
  Screen:
    type: object
    properties:
      screen_no:
        type: integer
        example: 101
      movie_no:
        type: integer
        example: 2
      title:
        type: string
        example: 영화2
      theater_name:
        type: string
        example: 강남점
  Seat:
    type: object
    properties:
      theater_name:
        type: string
        example: 강남점
      screen_no:
        type: integer
        example: 101
      seat_name:
        type: string
        example: A-0
      price:
        type: string
        example: '100000'
      is_book:
        type: string
        example: N
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"